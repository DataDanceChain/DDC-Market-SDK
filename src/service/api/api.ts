// Auto-generated API functions for api
// Do not edit this file manually

import { requestGet, requestPost } from '../index';
import type { ApiResponse, ApiRequestConfig } from '../../types';

/**
 * GetDDCConfig
 * 获取商户合约相关的默认配置参数
 * @path POST /config
 */
export async function getDDCConfig(
  data: {
  
  /** 钱包地址 可选
 */
  address?: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  
  /** nft 工厂合约的地址  用于部署商户NFT 合约
 */
  nft_factory_address: string;
  
  /** membership 工厂合约的地址 */
  membership_factory_address: string;
  metadata_url: string;
  
  /** 如果用户当前钱包地址 mint 了nft, 则返回, 用于判断是否已经存在
 */
  nft_address?: string;
  
  /** 如果用户当前钱包地址已经有 membership 合约, 则返回, 用于判断是否已经存在
 */
  membership_address?: string;
  
  /** ddc 的 rpc 网络配置信息, 同 metamask 钱包上的配置

 */
  network: {
  chainId: number;
  chainName: string;
  rpc_url: string;
  token_symbol: string;
  explore_url: string;
};
}>> {
  return requestPost<{
  
  /** nft 工厂合约的地址  用于部署商户NFT 合约
 */
  nft_factory_address: string;
  
  /** membership 工厂合约的地址 */
  membership_factory_address: string;
  metadata_url: string;
  
  /** 如果用户当前钱包地址 mint 了nft, 则返回, 用于判断是否已经存在
 */
  nft_address?: string;
  
  /** 如果用户当前钱包地址已经有 membership 合约, 则返回, 用于判断是否已经存在
 */
  membership_address?: string;
  
  /** ddc 的 rpc 网络配置信息, 同 metamask 钱包上的配置

 */
  network: {
  chainId: number;
  chainName: string;
  rpc_url: string;
  token_symbol: string;
  explore_url: string;
};
}>(`/config`, data, config);
}

/**
 * SetNFTPrivateKey
 * 存储用户mint nft 所用的 key 的hash 的私钥 参见 DDC Contract
 * @path POST /setNftPrivateKey
 */
export async function setNFTPrivateKey(
  data: {
  
  /** 商户钱包地址 */
  address: string;
  
  /** 私钥的值  没有的情况下 有前端随机生成 */
  private_key: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  code: number;
  data: {
  
  /** 返回是否成功 */
  result: boolean;
};
  message: string;
}>> {
  return requestPost<{
  code: number;
  data: {
  
  /** 返回是否成功 */
  result: boolean;
};
  message: string;
}>(`/setNftPrivateKey`, data, config);
}

/**
 * GetNFTPrivateKey
 * 获取 存储的用户mint nft 所用的 key 的hash 的私钥 参见 DDC Contract
 * @path POST /getNftPrivateKey
 */
export async function getNFTPrivateKey(
  data: {
  
  /** 商户钱包地址 */
  address: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  code: number;
  data: {
  
  /** 返回 私钥的值 */
  result: string;
};
  message: string;
}>> {
  return requestPost<{
  code: number;
  data: {
  
  /** 返回 私钥的值 */
  result: string;
};
  message: string;
}>(`/getNftPrivateKey`, data, config);
}

/**
 * SetRecipientKey
 * 存储用户transfer nft 所用的Recipient 的hash 的私钥 参见 DDC Contract
 * @path POST /setRecipientKey
 */
export async function setRecipientKey(
  data: {
  
  /** 商户钱包地址 */
  address: string;
  
  /** 私钥的值  没有的情况下 有前端随机生成 */
  private_key: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  code: number;
  data: {
  
  /** 返回是否成功 */
  result: boolean;
};
  message: string;
}>> {
  return requestPost<{
  code: number;
  data: {
  
  /** 返回是否成功 */
  result: boolean;
};
  message: string;
}>(`/setRecipientKey`, data, config);
}

/**
 * GetNftRecipientKey
 * 获取 存储的用户transfer nft 所用的 Recipient 的hash 的私钥 参见 DDC Contract
 * @path POST /getNftRecipientKey
 */
export async function getNftRecipientKey(
  data: {
  
  /** 商户钱包地址 */
  address: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  code: number;
  data: {
  
  /** 返回 私钥的值 */
  result: string;
};
  message: string;
}>> {
  return requestPost<{
  code: number;
  data: {
  
  /** 返回 私钥的值 */
  result: string;
};
  message: string;
}>(`/getNftRecipientKey`, data, config);
}
