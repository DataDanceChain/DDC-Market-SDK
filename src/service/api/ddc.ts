// Auto-generated API functions for ddc
// Do not edit this file manually

import { requestGet, requestPost } from '../index';
import type { ApiResponse, ApiRequestConfig } from '../../types';

/**
 * GetDDCConfig
 * 获取商户合约相关的默认配置参数
 * @path POST /ddc/config
 */
export async function getDDCConfig(
  data: {
  
  /** 钱包地址
 */
  address?: string;
},
  config?: ApiRequestConfig
): Promise<ApiResponse<{
  
  /** nft 工厂合约的地址  用于部署商户NFT 合约
 */
  nft_factory_address: string;
  
  /** membership 工厂合约的地址 */
  membership_factory_address: string;
  metadata_url: string;
  
  /** 如果用户当前钱包地址 mint 了nft, 则返回, 用于判断是否已经存在
 */
  nft_address?: Array<string>;
  
  /** 如果用户当前钱包地址已经有 membership 合约, 则返回, 用于判断是否已经存在
 */
  membership_address?: Array<string>;
  
  /** ddc 的 rpc 网络配置信息, 同 metamask 钱包上的配置

 */
  network: {
  chainId: number;
  chainName: string;
  rpc_url: string;
  token_symbol: string;
  explore_url: string;
};
}>> {
  return requestPost<{
  
  /** nft 工厂合约的地址  用于部署商户NFT 合约
 */
  nft_factory_address: string;
  
  /** membership 工厂合约的地址 */
  membership_factory_address: string;
  metadata_url: string;
  
  /** 如果用户当前钱包地址 mint 了nft, 则返回, 用于判断是否已经存在
 */
  nft_address?: Array<string>;
  
  /** 如果用户当前钱包地址已经有 membership 合约, 则返回, 用于判断是否已经存在
 */
  membership_address?: Array<string>;
  
  /** ddc 的 rpc 网络配置信息, 同 metamask 钱包上的配置

 */
  network: {
  chainId: number;
  chainName: string;
  rpc_url: string;
  token_symbol: string;
  explore_url: string;
};
}>(`/ddc/config`, data, config);
}
